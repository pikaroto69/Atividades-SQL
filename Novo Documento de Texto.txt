--1--
UPDATE DEBITOS 
SET SITUACAO_DEBITO = 'Atrasado'
WHERE SITUACAO_DEBITO NOT IN ('Pago', 'Negociado')
AND DATAVENCIMENTO < CURRENT_DATE

--2--
UPDATE DEBITOS 
SET SITUACAO_DEBITO = 'Atrasado'
WHERE SITUACAO_DEBITO NOT IN ('Pago')
AND DATAVENCIMENTO > CURRENT_DATE

--3--
UPDATE DEBITOS 
SET DATAVENCIMENTO = DATEADD(YEAR, -5 , DATAVENCIMENTO)
WHERE SITUACAO_DEBITO = 'Negociado'

--4--
SELECT NOME, EMAIL, TELEFONE
FROM PESSOA p

--5--
SELECT PRECO_UNITARIO FROM PRODUTO p 
WHERE PRECO_UNITARIO > 100

--6--
SELECT DATA_COMPRA FROM HISTORICO_COMPRAS_CLIENTE hcc 
WHERE DATA_COMPRA > '2023-01-01'

--7--
SELECT p.NOME, p.DATA_NASCIMENTO,
EXTRACT(YEAR FROM CURRENT_DATE) - EXTRACT(YEAR FROM p.DATA_NASCIMENTO)
FROM PESSOA p
INNER JOIN FORNECEDOR f ON f.ID_PESSOA = p.ID_PESSOA
INNER JOIN PRODUTO pr ON f.ID_FORNECEDOR = pr.ID_FORNECEDOR
WHERE pr.QUANTIDADE_ESTOQUE IS NULL

--8--
SELECT p.NOME 
FROM DEBITOS d
INNER JOIN CLIENTE c ON c.ID_CLIENTE = d.ID_CLIENTE
INNER JOIN PESSOA p ON p.ID_PESSOA = c.ID_PESSOA
WHERE d.SITUACAO_DEBITO = 'Atrasado'

--9-- Não fazer

--10--

SELECT FIRST 10 c.ID_CLIENTE, p.NOME
,EXTRACT(YEAR FROM CURRENT_DATE) - EXTRACT(YEAR FROM p.DATA_NASCIMENTO) AS IDADE 
,COALESCE( (SELECT SUM(d.VALOR_TOTAL) FROM DEBITOS d 
WHERE d.ID_CLIENTE = c.ID_CLIENTE AND d.DATAVENCIMENTO < CURRENT_DATE AND D.SITUACAO_DEBITO 
IN ('Atrasado', 'Pendente')),0) AS pendente,(SELECT SUM(d.VALOR_TOTAL) FROM DEBITOS d
WHERE d.ID_CLIENTE = c.ID_CLIENTE AND D.SITUACAO_DEBITO = 'Pago') AS pago FROM PESSOA p
INNER JOIN CLIENTE c ON C.ID_PESSOA = P.ID_PESSOA
ORDER BY 4 DESC

--11--

UPDATE PRODUTO 
SET PRECO_UNITARIO = PRECO_UNITARIO * 1.10
WHERE QUANTIDADE_ESTOQUE < 10

--12-- Não fazer

--13--

UPDATE DEBITOS d
SET d.SITUACAO_DEBITO = 'Pago'
WHERE d.SITUACAO_DEBITO = 'Atrasado'
AND EXISTS (SELECT * FROM PAGAMENTO p WHERE p.ID_debito = d.ID_DEBITO)

--14-- Não tem

--15--
SELECT *
FROM VENDA v 
WHERE DATA_VENDA BETWEEN '2023-12-01' AND '2024-01-31'

--16--

SELECT *
FROM PRODUTO p 
WHERE QUANTIDADE_ESTOQUE BETWEEN 5 AND 20

--17--

SELECT p.NOME
FROM PESSOA p 
WHERE NOME LIKE 'A%'

--18--
SELECT *
FROM PRODUTO p 
WHERE NOT EXISTS (SELECT 1 FROM ITENSVENDA i
INNER JOIN VENDA v ON I.ID_VENDA = V.ID_VENDA
WHERE I.ID_PRODUTO = P.ID_PRODUTO)

--19--
SELECT *
FROM PESSOA p 
INNER JOIN CLIENTE c ON p.ID_PESSOA = c.ID_PESSOA
INNER JOIN NOTAFISCAL n ON c.ID_CLIENTE = n.ID_CLIENTE
INNER JOIN ITENSNOTA i ON n.ID_NOTAFISCAL = i.ID_NOTAFISCAL
INNER JOIN PRODUTO p2 ON i.ID_PRODUTO = p2.ID_PRODUTO
WHERE p.NOME IN ('Carla Santos', 'Larissa Ferreira')

--20--
SELECT p.*
FROM PESSOA p 
WHERE p.ID_PESSOA IN (SELECT c.ID_PESSOA FROM CLIENTE c)
OR p.ID_PESSOA IN (SELECT f.ID_PESSOA FROM FUNCIONARIO f)

--21--
SELECT p.*, v.*, c.*, f.*
FROM VENDA v 
INNER JOIN CLIENTE c ON v.ID_PESSOA = c.ID_PESSOA 
INNER JOIN PESSOA p ON c.ID_PESSOA = p.ID_PESSOA 
INNER JOIN FORMA_PAGAMENTO f ON v.ID_FORMA_PAGAMENTO = f.ID_FORMA_PAGAMENTO

--22--
SELECT p.*, i.*, v.*
FROM PRODUTO p
INNER JOIN ITENSVENDA i ON P.ID_PRODUTO = I.ID_PRODUTO
INNER JOIN VENDA v ON I.ID_VENDA = V.ID_VENDA
WHERE P.NOME = ('Placa de Captura')

--23--

SELECT ps.NOME AS CLIENTE,
(EXTRACT(YEAR FROM CURRENT_DATE) + 2 - EXTRACT(YEAR FROM ps.DATA_NASCIMENTO)) AS IDADE_CLIENTE_2025, f.ID_FORNECEDOR AS ID_FORNECEDOR
FROM CLIENTE c
LEFT JOIN PESSOA ps ON c.ID_PESSOA = ps.ID_PESSOA
LEFT JOIN FORNECEDOR f ON f.ID_PESSOA = ps.ID_PESSOA
LEFT JOIN PESSOA pf ON f.ID_PESSOA = pf.ID_PESSOA

--24--
SELECT l.NOME AS LOGRADOURO, b.NOME AS BAIRRO,
CASE WHEN p.ID_PESSOA IS NOT NULL THEN 'Pertence' ELSE 'Não pertence' END AS PERTENCe
FROM LOGRADOURO l
INNER JOIN BAIRRO b ON l.ID_BAIRRO = b.ID_BAIRRO
LEFT JOIN ENDERECO e ON l.ID_LOGRADOURO = e.ID_LOGRADOURO
LEFT JOIN PESSOA p ON e.ID_PESSOA = p.ID_PESSOA

--25--
SELECT * 
FROM PRODUTO p
WHERE p.PRECO_UNITARIO > (SELECT AVG(PRECO_UNITARIO) FROM PRODUTO)

--26--

SELECT p.NOME AS CLIENTE, m.NOME AS MUNICIPIO, m.POPULACAO
FROM CLIENTE c
INNER JOIN PESSOA p ON c.ID_PESSOA = p.ID_PESSOA
INNER JOIN ENDERECO e ON p.ID_PESSOA = e.ID_PESSOA
INNER JOIN MUNICIPIO m ON e.ID_MUNICIPIO = m.ID_MUNICIPIO
WHERE m.POPULACAO > 1000000

--27--
SELECT F.ID_FORNECEDOR, p2.NOME, SUM(I.QUANTIDADE) AS total_vendido
FROM FORNECEDOR F
INNER JOIN PESSOA p2 ON F.ID_PESSOA = p2.ID_PESSOA 
INNER JOIN PRODUTO P ON F.ID_FORNECEDOR = P.ID_FORNECEDOR 
INNER JOIN ITENSVENDA I ON P.ID_PRODUTO = I.ID_PRODUTO 
GROUP BY F.ID_FORNECEDOR, p2.NOME

--28--
SELECT p.NOME, h.VALOR_TOTAL 
FROM HISTORICO_COMPRAS_CLIENTE h
INNER JOIN CLIENTE c ON h.ID_CLIENTE = c.ID_CLIENTE
INNER JOIN PESSOA p ON c.ID_PESSOA = p.ID_PESSOA 
WHERE h.VALOR_TOTAL > 500

--29--
SELECT p.NOME AS pessoa, b.NOME AS bairro, m.NOME AS municipio, l.NOME AS rua
FROM ENDERECO e 
INNER JOIN PESSOA p ON p.ID_PESSOA = e.ID_PESSOA
INNER JOIN LOGRADOURO l ON e.ID_LOGRADOURO = l.ID_LOGRADOURO
INNER JOIN MUNICIPIO m ON e.ID_MUNICIPIO = m.ID_MUNICIPIO 
INNER JOIN BAIRRO b ON	e.ID_BAIRRO = b.ID_BAIRRO 

--30--
SELECT p.NOME, p.PRECO_UNITARIO, p2.NOME AS FORNECEDOR 
FROM PRODUTO p 
INNER JOIN FORNECEDOR f ON p.ID_FORNECEDOR = f.ID_FORNECEDOR 
INNER JOIN PESSOA p2 ON f.ID_PESSOA = p2.ID_PESSOA

--31--
SELECT p.NOME, p.QUANTIDADE_ESTOQUE 
FROM PRODUTO p 
ORDER BY QUANTIDADE_ESTOQUE DESC 

--32--
SELECT v.ID_VENDA, v.VALOR_TOTAL 
FROM VENDA v 
ORDER BY v.VALOR_TOTAL ASC 

--33--
SELECT * 
FROM PRODUTO p
WHERE p.QUANTIDADE_ESTOQUE > (SELECT AVG(p.QUANTIDADE_ESTOQUE) FROM PRODUTO p)

--34--
SELECT p1.NOME AS pessoa1, p2.NOME AS pessoa2, p1.TELEFONE
FROM PESSOA p1
INNER JOIN PESSOA p2 ON p1.TELEFONE = p2.TELEFONE
WHERE p1.ID_PESSOA <> p2.ID_PESSOA

--35--
UPDATE PRODUTO p
SET p.PRECO_UNITARIO = p.PRECO_UNITARIO * 1.10
WHERE p.ID_FORNECEDOR IN (SELECT f.ID_FORNECEDOR FROM FORNECEDOR f
INNER JOIN PESSOA pe ON f.ID_PESSOA = pe.ID_PESSOA
INNER JOIN ENDERECO e ON pe.ID_PESSOA = e.ID_PESSOA
INNER JOIN MUNICIPIO m ON e.ID_MUNICIPIO = m.ID_MUNICIPIO
WHERE m.NOME = 'São Paulo')

--36--
SELECT p.NOME, d.SITUACAO_DEBITO 
FROM DEBITOS d
INNER JOIN CLIENTE c ON c.ID_CLIENTE = d.ID_CLIENTE
INNER JOIN PESSOA p ON p.ID_PESSOA = c.ID_PESSOA 
WHERE SITUACAO_DEBITO = ('Negociado')
